//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Collections.Specialized;
using System.Runtime.Serialization;


namespace FootballManagement.Commons.Entities
{
    [DataContract]
    public partial class Referee : Person
    {
        #region Primitive Properties
    [DataMember]
    		[Required]
    	    public virtual string Degree
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<Match> Matches
        {
            get
            {
                if (_matches == null)
                {
                    var newCollection = new FixupCollection<Match>();
                    newCollection.CollectionChanged += FixupMatches;
                    _matches = newCollection;
                }
                return _matches;
            }
            set
            {
                if (!ReferenceEquals(_matches, value))
                {
                    var previousValue = _matches as FixupCollection<Match>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMatches;
                    }
                    _matches = value;
                    var newValue = value as FixupCollection<Match>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMatches;
                    }
                }
            }
        }
        private ICollection<Match> _matches;
    
        public virtual ICollection<Tournament> Tournaments
        {
            get
            {
                if (_tournaments == null)
                {
                    var newCollection = new FixupCollection<Tournament>();
                    newCollection.CollectionChanged += FixupTournaments;
                    _tournaments = newCollection;
                }
                return _tournaments;
            }
            set
            {
                if (!ReferenceEquals(_tournaments, value))
                {
                    var previousValue = _tournaments as FixupCollection<Tournament>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupTournaments;
                    }
                    _tournaments = value;
                    var newValue = value as FixupCollection<Tournament>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupTournaments;
                    }
                }
            }
        }
        private ICollection<Tournament> _tournaments;

        #endregion

        #region Association Fixup
    
        private void FixupMatches(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Match item in e.NewItems)
                {
                    if (!item.Referees.Contains(this))
                    {
                        item.Referees.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Match item in e.OldItems)
                {
                    if (item.Referees.Contains(this))
                    {
                        item.Referees.Remove(this);
                    }
                }
            }
        }
    
        private void FixupTournaments(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Tournament item in e.NewItems)
                {
                    if (!item.Referees.Contains(this))
                    {
                        item.Referees.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Tournament item in e.OldItems)
                {
                    if (item.Referees.Contains(this))
                    {
                        item.Referees.Remove(this);
                    }
                }
            }
        }

        #endregion

    }
}
