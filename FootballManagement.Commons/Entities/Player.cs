//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Collections.Specialized;
using System.Runtime.Serialization;


namespace FootballManagement.Commons.Entities
{
    [DataContract(IsReference = true)]
    public partial class Player : Person
    {
        #region Primitive Properties
    	[DataMember]
    		[Required]
    	    public virtual bool IsCaptain
        {
            get;
            set;
        }
    	[DataMember]
    		[Required]
    	    public virtual bool IsAuthorized
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    	[DataMember]
        public virtual ICollection<Card> Cards
        {
            get
            {
                if (_cards == null)
                {
                    var newCollection = new FixupCollection<Card>();
                    newCollection.CollectionChanged += FixupCards;
                    _cards = newCollection;
                }
                return _cards;
            }
            set
            {
                if (!ReferenceEquals(_cards, value))
                {
                    var previousValue = _cards as FixupCollection<Card>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCards;
                    }
                    _cards = value;
                    var newValue = value as FixupCollection<Card>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCards;
                    }
                }
            }
        }
        private ICollection<Card> _cards;
    
    	[DataMember]
        public virtual ICollection<Goal> Goals
        {
            get
            {
                if (_goals == null)
                {
                    var newCollection = new FixupCollection<Goal>();
                    newCollection.CollectionChanged += FixupGoals;
                    _goals = newCollection;
                }
                return _goals;
            }
            set
            {
                if (!ReferenceEquals(_goals, value))
                {
                    var previousValue = _goals as FixupCollection<Goal>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGoals;
                    }
                    _goals = value;
                    var newValue = value as FixupCollection<Goal>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGoals;
                    }
                }
            }
        }
        private ICollection<Goal> _goals;
    
    	[DataMember]
        public virtual Team Team
        {
            get { return _team; }
            set
            {
                if (!ReferenceEquals(_team, value))
                {
                    var previousValue = _team;
                    _team = value;
                    FixupTeam(previousValue);
                }
            }
        }
        private Team _team;
    
    	[DataMember]
        public virtual ICollection<Match> Matches
        {
            get
            {
                if (_matches == null)
                {
                    var newCollection = new FixupCollection<Match>();
                    newCollection.CollectionChanged += FixupMatches;
                    _matches = newCollection;
                }
                return _matches;
            }
            set
            {
                if (!ReferenceEquals(_matches, value))
                {
                    var previousValue = _matches as FixupCollection<Match>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMatches;
                    }
                    _matches = value;
                    var newValue = value as FixupCollection<Match>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMatches;
                    }
                }
            }
        }
        private ICollection<Match> _matches;

        #endregion

        #region Association Fixup
    
        private void FixupTeam(Team previousValue)
        {
            if (previousValue != null && previousValue.Players.Contains(this))
            {
                previousValue.Players.Remove(this);
            }
    
            if (Team != null)
            {
                if (!Team.Players.Contains(this))
                {
                    Team.Players.Add(this);
                }
            }
        }
    
        private void FixupCards(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Card item in e.NewItems)
                {
                    item.Player = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Card item in e.OldItems)
                {
                    if (ReferenceEquals(item.Player, this))
                    {
                        item.Player = null;
                    }
                }
            }
        }
    
        private void FixupGoals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Goal item in e.NewItems)
                {
                    item.Player = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Goal item in e.OldItems)
                {
                    if (ReferenceEquals(item.Player, this))
                    {
                        item.Player = null;
                    }
                }
            }
        }
    
        private void FixupMatches(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Match item in e.NewItems)
                {
                    if (!item.Players.Contains(this))
                    {
                        item.Players.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Match item in e.OldItems)
                {
                    if (item.Players.Contains(this))
                    {
                        item.Players.Remove(this);
                    }
                }
            }
        }

        #endregion

    }
}
