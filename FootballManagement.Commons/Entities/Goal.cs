//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Collections.Specialized;
using System.Runtime.Serialization;


namespace FootballManagement.Commons.Entities
{
    [DataContract]
    public partial class Goal
    {
        #region Primitive Properties
    [DataMember]
    		[Required]
    	    public virtual int Id
        {
            get;
            set;
        }
    [DataMember]
    		[Required]
    	    public virtual System.DateTime Time
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    [DataMember]
        public virtual Match Match
        {
            get { return _match; }
            set
            {
                if (!ReferenceEquals(_match, value))
                {
                    var previousValue = _match;
                    _match = value;
                    FixupMatch(previousValue);
                }
            }
        }
        private Match _match;
    
    [DataMember]
        public virtual Player Player
        {
            get { return _player; }
            set
            {
                if (!ReferenceEquals(_player, value))
                {
                    var previousValue = _player;
                    _player = value;
                    FixupPlayer(previousValue);
                }
            }
        }
        private Player _player;

        #endregion

        #region Association Fixup
    
        private void FixupMatch(Match previousValue)
        {
            if (previousValue != null && previousValue.Goals.Contains(this))
            {
                previousValue.Goals.Remove(this);
            }
    
            if (Match != null)
            {
                if (!Match.Goals.Contains(this))
                {
                    Match.Goals.Add(this);
                }
            }
        }
    
        private void FixupPlayer(Player previousValue)
        {
            if (previousValue != null && previousValue.Goals.Contains(this))
            {
                previousValue.Goals.Remove(this);
            }
    
            if (Player != null)
            {
                if (!Player.Goals.Contains(this))
                {
                    Player.Goals.Add(this);
                }
            }
        }

        #endregion

    }
}
