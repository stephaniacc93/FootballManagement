//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Collections.Specialized;
using System.Runtime.Serialization;


namespace FootballManagement.Commons.Entities
{
    [DataContract]
    public partial class Match
    {
        #region Primitive Properties
    [DataMember]
    		[Required]
    	    public virtual int Id
        {
            get;
            set;
        }
    [DataMember]
    		[Required]
    	    public virtual System.DateTime MatchDate
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
    [DataMember]
        public virtual ICollection<Card> Cards
        {
            get
            {
                if (_cards == null)
                {
                    var newCollection = new FixupCollection<Card>();
                    newCollection.CollectionChanged += FixupCards;
                    _cards = newCollection;
                }
                return _cards;
            }
            set
            {
                if (!ReferenceEquals(_cards, value))
                {
                    var previousValue = _cards as FixupCollection<Card>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCards;
                    }
                    _cards = value;
                    var newValue = value as FixupCollection<Card>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCards;
                    }
                }
            }
        }
        private ICollection<Card> _cards;
    
    [DataMember]
        public virtual ICollection<Goal> Goals
        {
            get
            {
                if (_goals == null)
                {
                    var newCollection = new FixupCollection<Goal>();
                    newCollection.CollectionChanged += FixupGoals;
                    _goals = newCollection;
                }
                return _goals;
            }
            set
            {
                if (!ReferenceEquals(_goals, value))
                {
                    var previousValue = _goals as FixupCollection<Goal>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupGoals;
                    }
                    _goals = value;
                    var newValue = value as FixupCollection<Goal>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupGoals;
                    }
                }
            }
        }
        private ICollection<Goal> _goals;
    
    [DataMember]
        public virtual Team Team
        {
            get { return _team; }
            set
            {
                if (!ReferenceEquals(_team, value))
                {
                    var previousValue = _team;
                    _team = value;
                    FixupTeam(previousValue);
                }
            }
        }
        private Team _team;
    
    [DataMember]
        public virtual Team Team1
        {
            get { return _team1; }
            set
            {
                if (!ReferenceEquals(_team1, value))
                {
                    var previousValue = _team1;
                    _team1 = value;
                    FixupTeam1(previousValue);
                }
            }
        }
        private Team _team1;
    
    [DataMember]
        public virtual Tournament Tournament
        {
            get { return _tournament; }
            set
            {
                if (!ReferenceEquals(_tournament, value))
                {
                    var previousValue = _tournament;
                    _tournament = value;
                    FixupTournament(previousValue);
                }
            }
        }
        private Tournament _tournament;
    
    [DataMember]
        public virtual ICollection<Player> Players
        {
            get
            {
                if (_players == null)
                {
                    var newCollection = new FixupCollection<Player>();
                    newCollection.CollectionChanged += FixupPlayers;
                    _players = newCollection;
                }
                return _players;
            }
            set
            {
                if (!ReferenceEquals(_players, value))
                {
                    var previousValue = _players as FixupCollection<Player>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupPlayers;
                    }
                    _players = value;
                    var newValue = value as FixupCollection<Player>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupPlayers;
                    }
                }
            }
        }
        private ICollection<Player> _players;
    
    [DataMember]
        public virtual ICollection<Referee> Referees
        {
            get
            {
                if (_referees == null)
                {
                    var newCollection = new FixupCollection<Referee>();
                    newCollection.CollectionChanged += FixupReferees;
                    _referees = newCollection;
                }
                return _referees;
            }
            set
            {
                if (!ReferenceEquals(_referees, value))
                {
                    var previousValue = _referees as FixupCollection<Referee>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupReferees;
                    }
                    _referees = value;
                    var newValue = value as FixupCollection<Referee>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupReferees;
                    }
                }
            }
        }
        private ICollection<Referee> _referees;

        #endregion

        #region Association Fixup
    
        private void FixupTeam(Team previousValue)
        {
            if (previousValue != null && previousValue.Matches.Contains(this))
            {
                previousValue.Matches.Remove(this);
            }
    
            if (Team != null)
            {
                if (!Team.Matches.Contains(this))
                {
                    Team.Matches.Add(this);
                }
            }
        }
    
        private void FixupTeam1(Team previousValue)
        {
            if (previousValue != null && previousValue.Matches1.Contains(this))
            {
                previousValue.Matches1.Remove(this);
            }
    
            if (Team1 != null)
            {
                if (!Team1.Matches1.Contains(this))
                {
                    Team1.Matches1.Add(this);
                }
            }
        }
    
        private void FixupTournament(Tournament previousValue)
        {
            if (previousValue != null && previousValue.Matches.Contains(this))
            {
                previousValue.Matches.Remove(this);
            }
    
            if (Tournament != null)
            {
                if (!Tournament.Matches.Contains(this))
                {
                    Tournament.Matches.Add(this);
                }
            }
        }
    
        private void FixupCards(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Card item in e.NewItems)
                {
                    item.Match = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Card item in e.OldItems)
                {
                    if (ReferenceEquals(item.Match, this))
                    {
                        item.Match = null;
                    }
                }
            }
        }
    
        private void FixupGoals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Goal item in e.NewItems)
                {
                    item.Match = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Goal item in e.OldItems)
                {
                    if (ReferenceEquals(item.Match, this))
                    {
                        item.Match = null;
                    }
                }
            }
        }
    
        private void FixupPlayers(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Player item in e.NewItems)
                {
                    if (!item.Matches.Contains(this))
                    {
                        item.Matches.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Player item in e.OldItems)
                {
                    if (item.Matches.Contains(this))
                    {
                        item.Matches.Remove(this);
                    }
                }
            }
        }
    
        private void FixupReferees(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Referee item in e.NewItems)
                {
                    if (!item.Matches.Contains(this))
                    {
                        item.Matches.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Referee item in e.OldItems)
                {
                    if (item.Matches.Contains(this))
                    {
                        item.Matches.Remove(this);
                    }
                }
            }
        }

        #endregion

    }
}
