//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34003
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 11.0.50727.1
// 
namespace FootballManagement.Client.FootballManagementServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/FootballManagement.Service")]
    public partial class CompositeType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool BoolValueField;
        
        private string StringValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Card", Namespace="http://schemas.datacontract.org/2004/07/FootballManagement.Commons.Entities")]
    public partial class Card : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime DateField;
        
        private int IdField;
        
        private bool isRedCardField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Date {
            get {
                return this.DateField;
            }
            set {
                if ((this.DateField.Equals(value) != true)) {
                    this.DateField = value;
                    this.RaisePropertyChanged("Date");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isRedCard {
            get {
                return this.isRedCardField;
            }
            set {
                if ((this.isRedCardField.Equals(value) != true)) {
                    this.isRedCardField = value;
                    this.RaisePropertyChanged("isRedCard");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Goal", Namespace="http://schemas.datacontract.org/2004/07/FootballManagement.Commons.Entities")]
    public partial class Goal : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private System.DateTime TimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Time {
            get {
                return this.TimeField;
            }
            set {
                if ((this.TimeField.Equals(value) != true)) {
                    this.TimeField = value;
                    this.RaisePropertyChanged("Time");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Match", Namespace="http://schemas.datacontract.org/2004/07/FootballManagement.Commons.Entities")]
    public partial class Match : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private System.DateTime MatchDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MatchDate {
            get {
                return this.MatchDateField;
            }
            set {
                if ((this.MatchDateField.Equals(value) != true)) {
                    this.MatchDateField = value;
                    this.RaisePropertyChanged("MatchDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Person", Namespace="http://schemas.datacontract.org/2004/07/FootballManagement.Commons.Entities")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FootballManagement.Client.FootballManagementServiceReference.Referee))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(FootballManagement.Client.FootballManagementServiceReference.Player))]
    public partial class Person : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime BirthdayField;
        
        private string GenderField;
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime Birthday {
            get {
                return this.BirthdayField;
            }
            set {
                if ((this.BirthdayField.Equals(value) != true)) {
                    this.BirthdayField = value;
                    this.RaisePropertyChanged("Birthday");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderField, value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Referee", Namespace="http://schemas.datacontract.org/2004/07/FootballManagement.Commons.Entities")]
    public partial class Referee : FootballManagement.Client.FootballManagementServiceReference.Person {
        
        private string DegreeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Degree {
            get {
                return this.DegreeField;
            }
            set {
                if ((object.ReferenceEquals(this.DegreeField, value) != true)) {
                    this.DegreeField = value;
                    this.RaisePropertyChanged("Degree");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Player", Namespace="http://schemas.datacontract.org/2004/07/FootballManagement.Commons.Entities")]
    public partial class Player : FootballManagement.Client.FootballManagementServiceReference.Person {
        
        private bool IsAuthorizedField;
        
        private bool IsCaptainField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsAuthorized {
            get {
                return this.IsAuthorizedField;
            }
            set {
                if ((this.IsAuthorizedField.Equals(value) != true)) {
                    this.IsAuthorizedField = value;
                    this.RaisePropertyChanged("IsAuthorized");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsCaptain {
            get {
                return this.IsCaptainField;
            }
            set {
                if ((this.IsCaptainField.Equals(value) != true)) {
                    this.IsCaptainField = value;
                    this.RaisePropertyChanged("IsCaptain");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Team", Namespace="http://schemas.datacontract.org/2004/07/FootballManagement.Commons.Entities")]
    public partial class Team : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Tournament", Namespace="http://schemas.datacontract.org/2004/07/FootballManagement.Commons.Entities")]
    public partial class Tournament : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int IdField;
        
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="FootballManagementServiceReference.IFootballManagementService")]
    public interface IFootballManagementService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/GetData", ReplyAction="http://tempuri.org/IFootballManagementService/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IFootballManagementService/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.CompositeType> GetDataUsingDataContractAsync(FootballManagement.Client.FootballManagementServiceReference.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/CreateCard", ReplyAction="http://tempuri.org/IFootballManagementService/CreateCardResponse")]
        System.Threading.Tasks.Task<bool> CreateCardAsync(FootballManagement.Client.FootballManagementServiceReference.Card card);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/UpdateCard", ReplyAction="http://tempuri.org/IFootballManagementService/UpdateCardResponse")]
        System.Threading.Tasks.Task<bool> UpdateCardAsync(FootballManagement.Client.FootballManagementServiceReference.Card card);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/ReadCard", ReplyAction="http://tempuri.org/IFootballManagementService/ReadCardResponse")]
        System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.Card> ReadCardAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/DeleteCard", ReplyAction="http://tempuri.org/IFootballManagementService/DeleteCardResponse")]
        System.Threading.Tasks.Task<bool> DeleteCardAsync(FootballManagement.Client.FootballManagementServiceReference.Card card);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/GetListCard", ReplyAction="http://tempuri.org/IFootballManagementService/GetListCardResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<FootballManagement.Client.FootballManagementServiceReference.Card>> GetListCardAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/CreateGoal", ReplyAction="http://tempuri.org/IFootballManagementService/CreateGoalResponse")]
        System.Threading.Tasks.Task<bool> CreateGoalAsync(FootballManagement.Client.FootballManagementServiceReference.Goal goal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/UpdateGoal", ReplyAction="http://tempuri.org/IFootballManagementService/UpdateGoalResponse")]
        System.Threading.Tasks.Task<bool> UpdateGoalAsync(FootballManagement.Client.FootballManagementServiceReference.Goal goal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/ReadGoal", ReplyAction="http://tempuri.org/IFootballManagementService/ReadGoalResponse")]
        System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.Goal> ReadGoalAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/DeleteGoal", ReplyAction="http://tempuri.org/IFootballManagementService/DeleteGoalResponse")]
        System.Threading.Tasks.Task<bool> DeleteGoalAsync(FootballManagement.Client.FootballManagementServiceReference.Goal goal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/GetListGoal", ReplyAction="http://tempuri.org/IFootballManagementService/GetListGoalResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<FootballManagement.Client.FootballManagementServiceReference.Goal>> GetListGoalAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/CreateMatch", ReplyAction="http://tempuri.org/IFootballManagementService/CreateMatchResponse")]
        System.Threading.Tasks.Task<bool> CreateMatchAsync(FootballManagement.Client.FootballManagementServiceReference.Match match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/UpdateMatch", ReplyAction="http://tempuri.org/IFootballManagementService/UpdateMatchResponse")]
        System.Threading.Tasks.Task<bool> UpdateMatchAsync(FootballManagement.Client.FootballManagementServiceReference.Match match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/ReadMatch", ReplyAction="http://tempuri.org/IFootballManagementService/ReadMatchResponse")]
        System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.Match> ReadMatchAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/DeleteMatch", ReplyAction="http://tempuri.org/IFootballManagementService/DeleteMatchResponse")]
        System.Threading.Tasks.Task<bool> DeleteMatchAsync(FootballManagement.Client.FootballManagementServiceReference.Match match);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/GetListMatch", ReplyAction="http://tempuri.org/IFootballManagementService/GetListMatchResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<FootballManagement.Client.FootballManagementServiceReference.Match>> GetListMatchAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/CreatePlayer", ReplyAction="http://tempuri.org/IFootballManagementService/CreatePlayerResponse")]
        System.Threading.Tasks.Task<bool> CreatePlayerAsync(FootballManagement.Client.FootballManagementServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/UpdatePlayer", ReplyAction="http://tempuri.org/IFootballManagementService/UpdatePlayerResponse")]
        System.Threading.Tasks.Task<bool> UpdatePlayerAsync(FootballManagement.Client.FootballManagementServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/ReadPlayer", ReplyAction="http://tempuri.org/IFootballManagementService/ReadPlayerResponse")]
        System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.Player> ReadPlayerAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/DeletePlayer", ReplyAction="http://tempuri.org/IFootballManagementService/DeletePlayerResponse")]
        System.Threading.Tasks.Task<bool> DeletePlayerAsync(FootballManagement.Client.FootballManagementServiceReference.Player player);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/GetListPlayer", ReplyAction="http://tempuri.org/IFootballManagementService/GetListPlayerResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<FootballManagement.Client.FootballManagementServiceReference.Player>> GetListPlayerAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/CreateReferee", ReplyAction="http://tempuri.org/IFootballManagementService/CreateRefereeResponse")]
        System.Threading.Tasks.Task<bool> CreateRefereeAsync(FootballManagement.Client.FootballManagementServiceReference.Referee referee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/UpdateReferee", ReplyAction="http://tempuri.org/IFootballManagementService/UpdateRefereeResponse")]
        System.Threading.Tasks.Task<bool> UpdateRefereeAsync(FootballManagement.Client.FootballManagementServiceReference.Referee referee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/ReadReferee", ReplyAction="http://tempuri.org/IFootballManagementService/ReadRefereeResponse")]
        System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.Referee> ReadRefereeAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/DeleteReferee", ReplyAction="http://tempuri.org/IFootballManagementService/DeleteRefereeResponse")]
        System.Threading.Tasks.Task<bool> DeleteRefereeAsync(FootballManagement.Client.FootballManagementServiceReference.Referee referee);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/GetListReferee", ReplyAction="http://tempuri.org/IFootballManagementService/GetListRefereeResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<FootballManagement.Client.FootballManagementServiceReference.Referee>> GetListRefereeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/CreateTeam", ReplyAction="http://tempuri.org/IFootballManagementService/CreateTeamResponse")]
        System.Threading.Tasks.Task<bool> CreateTeamAsync(FootballManagement.Client.FootballManagementServiceReference.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/UpdateTeam", ReplyAction="http://tempuri.org/IFootballManagementService/UpdateTeamResponse")]
        System.Threading.Tasks.Task<bool> UpdateTeamAsync(FootballManagement.Client.FootballManagementServiceReference.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/ReadTeam", ReplyAction="http://tempuri.org/IFootballManagementService/ReadTeamResponse")]
        System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.Team> ReadTeamAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/DeleteTeam", ReplyAction="http://tempuri.org/IFootballManagementService/DeleteTeamResponse")]
        System.Threading.Tasks.Task<bool> DeleteTeamAsync(FootballManagement.Client.FootballManagementServiceReference.Team team);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/GetListTeam", ReplyAction="http://tempuri.org/IFootballManagementService/GetListTeamResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<FootballManagement.Client.FootballManagementServiceReference.Team>> GetListTeamAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/CreateTournament", ReplyAction="http://tempuri.org/IFootballManagementService/CreateTournamentResponse")]
        System.Threading.Tasks.Task<bool> CreateTournamentAsync(FootballManagement.Client.FootballManagementServiceReference.Tournament tournament);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/UpdateTournament", ReplyAction="http://tempuri.org/IFootballManagementService/UpdateTournamentResponse")]
        System.Threading.Tasks.Task<bool> UpdateTournamentAsync(FootballManagement.Client.FootballManagementServiceReference.Tournament tournament);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/ReadTournament", ReplyAction="http://tempuri.org/IFootballManagementService/ReadTournamentResponse")]
        System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.Tournament> ReadTournamentAsync(int ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/DeleteTournament", ReplyAction="http://tempuri.org/IFootballManagementService/DeleteTournamentResponse")]
        System.Threading.Tasks.Task<bool> DeleteTournamentAsync(FootballManagement.Client.FootballManagementServiceReference.Tournament tournament);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFootballManagementService/GetListTournament", ReplyAction="http://tempuri.org/IFootballManagementService/GetListTournamentResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<FootballManagement.Client.FootballManagementServiceReference.Tournament>> GetListTournamentAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFootballManagementServiceChannel : FootballManagement.Client.FootballManagementServiceReference.IFootballManagementService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FootballManagementServiceClient : System.ServiceModel.ClientBase<FootballManagement.Client.FootballManagementServiceReference.IFootballManagementService>, FootballManagement.Client.FootballManagementServiceReference.IFootballManagementService {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public FootballManagementServiceClient() : 
                base(FootballManagementServiceClient.GetDefaultBinding(), FootballManagementServiceClient.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_IFootballManagementService.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FootballManagementServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(FootballManagementServiceClient.GetBindingForEndpoint(endpointConfiguration), FootballManagementServiceClient.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FootballManagementServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(FootballManagementServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FootballManagementServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(FootballManagementServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public FootballManagementServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.CompositeType> GetDataUsingDataContractAsync(FootballManagement.Client.FootballManagementServiceReference.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public System.Threading.Tasks.Task<bool> CreateCardAsync(FootballManagement.Client.FootballManagementServiceReference.Card card) {
            return base.Channel.CreateCardAsync(card);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateCardAsync(FootballManagement.Client.FootballManagementServiceReference.Card card) {
            return base.Channel.UpdateCardAsync(card);
        }
        
        public System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.Card> ReadCardAsync(int ID) {
            return base.Channel.ReadCardAsync(ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCardAsync(FootballManagement.Client.FootballManagementServiceReference.Card card) {
            return base.Channel.DeleteCardAsync(card);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<FootballManagement.Client.FootballManagementServiceReference.Card>> GetListCardAsync() {
            return base.Channel.GetListCardAsync();
        }
        
        public System.Threading.Tasks.Task<bool> CreateGoalAsync(FootballManagement.Client.FootballManagementServiceReference.Goal goal) {
            return base.Channel.CreateGoalAsync(goal);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateGoalAsync(FootballManagement.Client.FootballManagementServiceReference.Goal goal) {
            return base.Channel.UpdateGoalAsync(goal);
        }
        
        public System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.Goal> ReadGoalAsync(int ID) {
            return base.Channel.ReadGoalAsync(ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteGoalAsync(FootballManagement.Client.FootballManagementServiceReference.Goal goal) {
            return base.Channel.DeleteGoalAsync(goal);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<FootballManagement.Client.FootballManagementServiceReference.Goal>> GetListGoalAsync() {
            return base.Channel.GetListGoalAsync();
        }
        
        public System.Threading.Tasks.Task<bool> CreateMatchAsync(FootballManagement.Client.FootballManagementServiceReference.Match match) {
            return base.Channel.CreateMatchAsync(match);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateMatchAsync(FootballManagement.Client.FootballManagementServiceReference.Match match) {
            return base.Channel.UpdateMatchAsync(match);
        }
        
        public System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.Match> ReadMatchAsync(int ID) {
            return base.Channel.ReadMatchAsync(ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteMatchAsync(FootballManagement.Client.FootballManagementServiceReference.Match match) {
            return base.Channel.DeleteMatchAsync(match);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<FootballManagement.Client.FootballManagementServiceReference.Match>> GetListMatchAsync() {
            return base.Channel.GetListMatchAsync();
        }
        
        public System.Threading.Tasks.Task<bool> CreatePlayerAsync(FootballManagement.Client.FootballManagementServiceReference.Player player) {
            return base.Channel.CreatePlayerAsync(player);
        }
        
        public System.Threading.Tasks.Task<bool> UpdatePlayerAsync(FootballManagement.Client.FootballManagementServiceReference.Player player) {
            return base.Channel.UpdatePlayerAsync(player);
        }
        
        public System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.Player> ReadPlayerAsync(int ID) {
            return base.Channel.ReadPlayerAsync(ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeletePlayerAsync(FootballManagement.Client.FootballManagementServiceReference.Player player) {
            return base.Channel.DeletePlayerAsync(player);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<FootballManagement.Client.FootballManagementServiceReference.Player>> GetListPlayerAsync() {
            return base.Channel.GetListPlayerAsync();
        }
        
        public System.Threading.Tasks.Task<bool> CreateRefereeAsync(FootballManagement.Client.FootballManagementServiceReference.Referee referee) {
            return base.Channel.CreateRefereeAsync(referee);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateRefereeAsync(FootballManagement.Client.FootballManagementServiceReference.Referee referee) {
            return base.Channel.UpdateRefereeAsync(referee);
        }
        
        public System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.Referee> ReadRefereeAsync(int ID) {
            return base.Channel.ReadRefereeAsync(ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteRefereeAsync(FootballManagement.Client.FootballManagementServiceReference.Referee referee) {
            return base.Channel.DeleteRefereeAsync(referee);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<FootballManagement.Client.FootballManagementServiceReference.Referee>> GetListRefereeAsync() {
            return base.Channel.GetListRefereeAsync();
        }
        
        public System.Threading.Tasks.Task<bool> CreateTeamAsync(FootballManagement.Client.FootballManagementServiceReference.Team team) {
            return base.Channel.CreateTeamAsync(team);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTeamAsync(FootballManagement.Client.FootballManagementServiceReference.Team team) {
            return base.Channel.UpdateTeamAsync(team);
        }
        
        public System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.Team> ReadTeamAsync(int ID) {
            return base.Channel.ReadTeamAsync(ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTeamAsync(FootballManagement.Client.FootballManagementServiceReference.Team team) {
            return base.Channel.DeleteTeamAsync(team);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<FootballManagement.Client.FootballManagementServiceReference.Team>> GetListTeamAsync() {
            return base.Channel.GetListTeamAsync();
        }
        
        public System.Threading.Tasks.Task<bool> CreateTournamentAsync(FootballManagement.Client.FootballManagementServiceReference.Tournament tournament) {
            return base.Channel.CreateTournamentAsync(tournament);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateTournamentAsync(FootballManagement.Client.FootballManagementServiceReference.Tournament tournament) {
            return base.Channel.UpdateTournamentAsync(tournament);
        }
        
        public System.Threading.Tasks.Task<FootballManagement.Client.FootballManagementServiceReference.Tournament> ReadTournamentAsync(int ID) {
            return base.Channel.ReadTournamentAsync(ID);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteTournamentAsync(FootballManagement.Client.FootballManagementServiceReference.Tournament tournament) {
            return base.Channel.DeleteTournamentAsync(tournament);
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<FootballManagement.Client.FootballManagementServiceReference.Tournament>> GetListTournamentAsync() {
            return base.Channel.GetListTournamentAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFootballManagementService)) {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_IFootballManagementService)) {
                return new System.ServiceModel.EndpointAddress("http://localhost:8733/Design_Time_Addresses/FootballManagement.Service/Service1/");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return FootballManagementServiceClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_IFootballManagementService);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return FootballManagementServiceClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_IFootballManagementService);
        }
        
        public enum EndpointConfiguration {
            
            BasicHttpBinding_IFootballManagementService,
        }
    }
}
